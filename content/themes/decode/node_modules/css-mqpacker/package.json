{
  "name": "css-mqpacker",
  "description": "Pack same CSS media query rules into one media query rule.",
  "version": "3.1.0",
  "author": {
    "name": "Kyo Nagashima",
    "email": "hail2u@gmail.com",
    "url": "https://kyonagashima.com/"
  },
  "bugs": {
    "url": "https://github.com/hail2u/node-css-mqpacker/issues"
  },
  "dependencies": {
    "fs-extra": "^0.16.0",
    "postcss": "^4.0.0"
  },
  "devDependencies": {
    "nodeunit": "^0.9.0"
  },
  "files": [
    "README.md",
    "index.js",
    "lib",
    "package.json",
    "tasks",
    "test"
  ],
  "homepage": "https://github.com/hail2u/node-css-mqpacker",
  "keywords": [
    "css",
    "optimization",
    "mediaquery",
    "media",
    "query",
    "sourcemap",
    "source",
    "map",
    "postcss",
    "gruntplugin"
  ],
  "license": {
    "type": "MIT",
    "url": "http://hail2u.mit-license.org/2014"
  },
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/hail2u/node-css-mqpacker.git"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "readme": "CSS MQPacker\n============\n\nPack same CSS media query rules into one media query rule.\n\nWritten with [PostCSS][1].\n\n\nINSTALLATION\n------------\n\n    $ npm install css-mqpacker\n\n\nQUICK USAGE\n-----------\n\nRead `from.css`, process its content, and output processed CSS to STDOUT.\n\n```js\n#!/usr/bin/env node\n\n'use strict';\n\nvar fs = require('fs');\nvar mqpacker = require('css-mqpacker');\n\nvar original = fs.readFileSync('from.css', 'utf8');\nvar processed = mqpacker.pack(original, {\n  from: 'from.css',\n  map: {\n    inline: false\n  },\n  to: 'to.css'\n});\nconsole.log(processed.css);\n```\n\nIf `test.css` has:\n\n```css\n@charset \"UTF-8\";\n\n.foo::before {\n  content: \"foo on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n```\n\nYou will get following output:\n\n```css\n@charset \"UTF-8\";\n\n.foo::before {\n  content: \"foo on small\";\n}\n\n.bar::before {\n  content: \"bar on small\";\n}\n\n@media screen and (min-width: 769px) {\n  .foo::before {\n    content: \"foo on medium\";\n  }\n  .bar::before {\n    content: \"bar on medium\";\n  }\n}\n\n/*# sourceMappingURL=to.css.map */\n```\n\nSweet!\n\n\nOPTIONS\n-------\n\n### sort\n\nBy default, CSS MQPacker pack and order media queries as they are defined. See\nalso [The \"First Win\" Algorithm][2]. If you want to sort queries automatically,\npass `sort: true` to this module.\n\n```javascript\nmqpacker({\n  sort: true\n}).pack(css);\n```\n\nCurrently, this option only supports `min-width` queries with specific units\n(`ch`, `em`, `ex`, `px`, and `rem`). If you want to do more, you need to create\nyour own sorting function and pass it to this option like this:\n\n```javascript\nmqpacker({\n  sort: function (a, b) {\n    return a.localeCompare(b);\n  }\n}).pack(css);\n```\n\nIn this example, all your queries will sort by A-Z order.\n\nThis sorting function directly pass to `Array#sort()` method of an array of all\nyour queries.\n\n\nAPI\n---\n\n### pack(css, [options])\n\nPacks media queries in `css`.\n\nThe second argument is optional. The `options` is same as the second argument of\nPostCSS's `process()` method. This is useful for generating Source Map.\n\n```javascript\nvar fs = require('fs');\nvar mqpacker = require('css-mqpacker');\n\nvar css = fs.readFileSync('from.css', 'utf8');\nvar result = mqpacker.pack(css, {\n  from: 'from.css',\n  map: {\n    inline: false\n  },\n  to: 'to.css'\n});\nfs.writeFileSync('to.css', result.css);\nfs.writeFileSync('to.css.map', result.map);\n```\n\nSee also [PostCSS document][2] for more about this `options`.\n\n\n### postcss\n\nReturns [PostCSS processor][3].\n\nYou can use this property for combining with other PostCSS processors such as\n[Autoprefixer][4].\n\n```javascript\nvar autoprefixer = require('autoprefixer');\nvar mqpacker = require('css-mqpacker');\nvar postcss = require('postcss');\n\nvar css = fs.readFileSync('test.css', 'utf8');\npostcss().use(\n  autoprefixer.postcss\n).use(\n  mqpacker.postcss\n).process(css);\n```\n\n\nGRUNT PLUGIN USAGE\n------------------\n\nThis package also installs a Grunt plugin. You can enable this plugin in\n`Gruntfile.js` of your project like that:\n\n    grunt.loadNpmTasks('css-mqpacker');\n\nThis was not tested. I suggest using [`grunt-postcss`][5].\n\n\n### Example Config\n\nTo pack `src/css/**/*.css` to `build/css/**/*.min.css` with source map:\n\n    grunt.initConfig({\n      'css_mqpacker': {\n        options: {\n          map: {\n            inline: false,\n            sourcesContent: false\n          }\n        },\n    \n        main: {\n          cwd: 'src/css/',\n          dest: 'build/css/',\n          expand: true,\n          ext: '.min.css',\n          src: ['**/*.css']\n        }\n      }\n    });\n\nYou can specify both [options of this package][7] and [PostCSS options][3] with\n`options` field of this task.\n\n\nKNOWN ISSUES\n------------\n\n### The \"First Win\" Algorithm\n\nCSS MQPacker is implemented with the \"first win\" algorithm. This means:\n\n```css\n.foo {\n  width: 10px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 150px;\n  }\n}\n\n.bar {\n  width: 20px;\n}\n\n@media (min-width: 320px) {\n  .bar {\n    width: 200px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 300px;\n  }\n}\n```\n\nBecomes:\n\n```css\n.foo {\n  width: 10px;\n}\n\n.bar {\n  width: 20px;\n}\n\n@media (min-width: 640px) {\n  .foo {\n    width: 150px;\n  }\n  .bar {\n    width: 300px;\n  }\n}\n\n@media (min-width: 320px) {\n  .bar {\n    width: 200px;\n  }\n}\n```\n\nThis breaks cascading order of `.bar`, and `.bar` will be displayed in `200px`\ninstead of `300px` even if a viewport wider than `640px`.\n\nI suggest defining a query order at first:\n\n```css\n@media (min-width: 320px) { /*! Wider than 320px */ }\n@media (min-width: 640px) { /*! Wider than 640px */ }\n```\n\nOr sort [`min-width` queries automatically][7].\n\n\n### CSS Applying Order\n\nCSS MQPacker changes order of rulesets. This may breaks CSS applying order.\n\n```css\n@media (min-width: 320px) {\n  .foo {\n    width: 100px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 200px;\n  }\n}\n\n@media (min-width: 320px) {\n  .baz {\n    width: 300px;\n  }\n}\n```\n\nBecomes:\n\n```css\n@media (min-width: 320px) {\n  .foo {\n    width: 100px;\n  }\n  .baz {\n    width: 300px;\n  }\n}\n\n@media (min-width: 640px) {\n  .bar {\n    width: 200px;\n  }\n}\n```\n\nFine. But If a HTML element has `class=\"bar baz\"` and viewport width larger than\n`640px`, that element `width` incorrectly set to `200px` instead of `300px`.\nThis cannot be resolved only with CSS. So, be careful!\n\n\nLICENSE\n-------\n\nMIT: http://hail2u.mit-license.org/2014\n\n\n[1]: https://github.com/postcss/postcss\n[2]: #the-first-win-algorithm\n[3]: https://github.com/postcss/postcss#source-map-1\n[4]: https://github.com/postcss/postcss#processor\n[5]: https://github.com/postcss/autoprefixer-core\n[6]: https://github.com/nDmitry/grunt-postcss\n[7]: #options\n",
  "readmeFilename": "README.md",
  "_id": "css-mqpacker@3.1.0",
  "_shasum": "14ea12741b7ab1c6ac43dc769d31006f9e96497b",
  "_from": "css-mqpacker@^3.1.0",
  "_resolved": "https://registry.npmjs.org/css-mqpacker/-/css-mqpacker-3.1.0.tgz"
}
