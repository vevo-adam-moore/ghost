{
  "name": "postcss-import",
  "version": "5.2.2",
  "description": "PostCSS plugin to import CSS files",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugins",
    "import",
    "node modules",
    "npm"
  ],
  "author": {
    "name": "Maxime Thirouin"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/postcss/postcss-import.git"
  },
  "files": [
    "CHANGELOG.md",
    "LICENSE",
    "index.js"
  ],
  "dependencies": {
    "clone": "^0.1.17",
    "glob": "^5.0.1",
    "postcss": "^4.0.2",
    "postcss-message-helpers": "^2.0.0",
    "resolve": "^1.0.0",
    "string-hash": "^1.1.0"
  },
  "devDependencies": {
    "css-whitespace": "^1.1.0",
    "jscs": "^1.6.2",
    "jshint": "^2.5.6",
    "tape": "^3.0.0"
  },
  "scripts": {
    "jscs": "jscs .",
    "jshint": "jshint . --exclude-path .gitignore",
    "pretest": "npm run jscs && npm run jshint",
    "test": "tape test/*.js"
  },
  "readme": "# postcss-import [![Travis Build Status](https://travis-ci.org/postcss/postcss-import.svg)](https://travis-ci.org/postcss/postcss-import) [![AppVeyor Build status](https://ci.appveyor.com/api/projects/status/u8l6u3lr6s5u5tpi?svg=true)](https://ci.appveyor.com/project/MoOx/postcss-import)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import` rules by inlining content.\n\nThis plugin can consume local files or node modules.\nTo resolve path of an `@import` rule, it can look into root directory (by default `process.cwd()`), `node_modules`, `web_modules` or local modules.\nYou can also provide manually multiples paths where to look at.\n\n**Notes:**\n\n- This plugin works great with [postcss-url](https://github.com/postcss/postcss-url) plugin,\nwhich will allow you to adjust assets `url()` (or even inline them) after inlining imported files.\n- In order to optimize output, this plugin will only import a file once on a given scope (root, media query...). Tests are made from the path & the content of imported files (using a hash table).\n\n## Installation\n\n```console\n$ npm install postcss-import\n```\n\n## Usage\n\nIf your stylesheets are not in the same place where you run postcss (`process.cwd()`), you will need to use `from` option to make relative imports work from input dirname.\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\n// css to be processed\nvar css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\nvar output = postcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is required so relative import can work from input dirname\n    from: \"css/input.css\"\n  })\n  .css\n\nconsole.log(output)\n```\n\nUsing this `input.css`:\n\n```css\n/* can consume `node_modules`, `web_modules` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n\n@import \"css/foo.css\"; /* relative to stylesheets/ according to `from` option above */\n\n@import \"css/bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of ./node_modules/my-css-on-npm/index.css */\n\n/* ... content of foo.css */\n\n@media (min-width: 25em) {\n/* ... content of bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout [tests](test) for more examples.\n\n### Options\n\n#### `root`\n\nType: `String`  \nDefault: `process.cwd()`\n\nDefine the root where to resolve path (eg: place where `node_modules` is). Should not be used that much.\n\n#### `path`\n\nType: `String|Array`  \nDefault: `process.cwd()` or _dirname of [the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nA string or an array of paths in where to look for files.  \n_Note: nested `@import` will additionally benefit of the relative dirname of imported files._\n\n#### `transform`\n\nType: `Function`  \nDefault: `null`\n\nA function to transform the content of imported files. Take one argument (file content) & should return the modified content.\n\n#### `encoding`\n\nType: `String`  \nDefault: `utf8`\n\nUse if your CSS is encoded in anything other than UTF-8.\n\n#### `onImport`\n\nType: `Function`  \nDefault: `null`\n\nFunction called after the import process. Take one argument (array of imported files).\n\n#### `glob`\n\nType: `Boolean`  \nDefault: `false`\n\nSet to `true` if you want @import rules to parse glob patterns.\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\nvar css = postcss()\n  .use(atImport({\n    path: [\"src/css\"]\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .css\n```\n\n---\n\n## Contributing\n\nWork on a branch, install dev-dependencies, respect coding style & run tests before submitting a bug fix or a feature.\n\n```console\n$ git clone https://github.com/postcss/postcss-import.git\n$ git checkout -b patch-1\n$ npm install\n$ npm test\n```\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/postcss/postcss-import/issues"
  },
  "homepage": "https://github.com/postcss/postcss-import",
  "_id": "postcss-import@5.2.2",
  "_shasum": "2090ffd4028713447d711e0b353eed99fc972736",
  "_from": "postcss-import@^5.1.1",
  "_resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-5.2.2.tgz"
}
